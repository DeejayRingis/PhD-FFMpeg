/*
 * Copyright (c) 2001 Fabrice Bellard
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * @file
 * libavcodec API use example.
 *
 * Note that libavcodec only handles codecs (mpeg, mpeg4, etc...),
 * not file formats (avi, vob, mp4, mov, mkv, mxf, flv, mpegts, mpegps, etc...). See library 'libavformat' for the
 * format handling
 * @example doc/examples/decoding_encoding.c
 */
#include <stdio.h>
#include <math.h>
#include <libavutil/opt.h>
#include <libavformat/avformat.h>
#include <libavcodec/avcodec.h>
#include <libavutil/channel_layout.h>
#include <libavutil/common.h>
#include <libavutil/imgutils.h>
#include <libavutil/mathematics.h>
#include <libavutil/samplefmt.h>

#include <libavutil/motion_vector.h>

#define INBUF_SIZE 4096



  static AVFrame *frame = NULL;

  static     char inputfile[];
  static AVPacket pkt;
  static int video_frame_count = 0;

  AVFrame* Open_Image(char* imageFileName)
  {
	  printf("i made it to this point\n");
      AVFormatContext *pFormatCtx;

      if(avformat_open_input(&pFormatCtx, imageFileName, NULL, NULL)!=0)
      {
          printf("Can't open image file '%s'\n", imageFileName);
          return NULL;
      }

     // dump_format(pFormatCtx, 0, imageFileName, false);

      AVCodecContext *pCodecCtx;

      pCodecCtx = pFormatCtx->streams[0]->codec;
      pCodecCtx->width = 1024;
      pCodecCtx->height = 436;
      pCodecCtx->pix_fmt = AV_PIX_FMT_YUV420P;

      // Find the decoder for the video stream
      AVCodec *pCodec = avcodec_find_decoder(pCodecCtx->codec_id);
      if (!pCodec)
      {
          printf("Codec not found\n");
          return NULL;
      }

      // Open codec
      if(avcodec_open2(pCodecCtx, pCodec,NULL)<0)
      {
          printf("Could not open codec\n");
          return NULL;
      }

      //
      AVFrame *pFrame;

      pFrame = av_frame_alloc();

      if (!pFrame)
      {
          printf("Can't allocate memory for AVFrame\n");
          return NULL;
      }

      int frameFinished;
      int numBytes;

      // Determine required buffer size and allocate buffer
      numBytes = avpicture_get_size(AV_PIX_FMT_YUVJ420P, pCodecCtx->width, pCodecCtx->height);
      uint8_t *buffer = (uint8_t *) av_malloc(numBytes * sizeof(uint8_t));

      avpicture_fill((AVPicture *) pFrame, buffer, AV_PIX_FMT_YUVJ420P, pCodecCtx->width, pCodecCtx->height);

      // Read frame

      AVPacket packet;

      int framesNumber = 0;
      while (av_read_frame(pFormatCtx, &packet) >= 0)
      {
          if(packet.stream_index != 0)
              continue;

          int ret = avcodec_decode_video2(pCodecCtx, pFrame, &frameFinished, &packet);
          if (ret > 0)
          {
              printf("Frame is decoded, size %d\n", ret);
              pFrame->quality = 4;
              return pFrame;
          }
          else
              printf("Error [%d] while decoding frame: %s\n", ret, strerror(AVERROR(ret)));
      }
  }



static void video_encode_example(const char *filename, int codec_id)
{
    AVCodec *codec;
    AVCodecContext *c= NULL;
    int i, ret, x, y, got_output;
    FILE *f;
    AVFrame *encframe;
    AVPacket encpkt;
    uint8_t endcode[] = { 0, 0, 1, 0xb7 };
    printf("Encode video file %s\n", filename);
    /* find the mpeg1 video encoder */
    codec = avcodec_find_encoder(codec_id);
    if (!codec) {
        fprintf(stderr, "Codec not found\n");
        exit(1);
    }
    c = avcodec_alloc_context3(codec);
    if (!c) {
        fprintf(stderr, "Could not allocate video codec context\n");
        exit(1);
    }
    /* put sample parameters */
    c->bit_rate = 400000;
    /* resolution must be a multiple of two */
    c->width = 1024;
    c->height = 468;
    /* frames per second */
    c->time_base = (AVRational){1,25};
    c->gop_size = 10; /* emit one intra frame every ten frames */
    c->max_b_frames = 1;
    c->pix_fmt = AV_PIX_FMT_YUV420P;
    if (codec_id == AV_CODEC_ID_H264)
        av_opt_set(c->priv_data, "preset", "slow", 0);
    /* open it */
    if (avcodec_open2(c, codec, NULL) < 0) {
        fprintf(stderr, "Could not open codec\n");
        exit(1);
    }
    f = fopen(filename, "wb");
    if (!f) {
        fprintf(stderr, "Could not open %s\n", filename);
        exit(1);
    }
    encframe = av_frame_alloc();
    if (!encframe) {
        fprintf(stderr, "Could not allocate video frame\n");
        exit(1);
    }
    printf("do i reach this point?\n");
    encframe->format = c->pix_fmt;
    encframe->width  = c->width;
    encframe->height =  c->height;
    /* the image can be allocated by any means and av_image_alloc() is
     * just the most convenient way if av_malloc() is to be used */
    ret = av_image_alloc(encframe->data, encframe->linesize, c->width, c->height,
                         c->pix_fmt, 32);
    printf("how bout here?\n");
    if (ret < 0) {
        fprintf(stderr, "Could not allocate raw picture buffer\n");
        exit(1);
    }
    /* encode 1 second of video */
    for (i = 0; i < 24; i++) {
    	printf("frame number %d\n",i);
        av_init_packet(&encpkt);
        encpkt.data = NULL;    // packet data will be allocated by the encoder
        encpkt.size = 0;
        fflush(stdout);
        printf("sup?\n");
        printf("do i even reach here");
             /* prepare a dummy image */
        /* Y */
        //this is where i need to get the information in.................................
       for (y = 0; y < c->height; y++) {
            for (x = 0; x < c->width; x++) {
                encframe->data[0][y * encframe->linesize[0] + x] = x + y + i * 3;
            }
        }
        /// Cb and Cr
        for (y = 0; y < c->height/2; y++) {
            for (x = 0; x < c->width/2; x++) {
                encframe->data[1][y * encframe->linesize[1] + x] = 128 + y + i * 2;
                encframe->data[2][y * encframe->linesize[2] + x] = 64 + x + i * 5;
            }

        }

      int framenum =i;
    //    snprintf(inputfile, 15,"%s_%4d.png","frame", framenum);
     //---------------------------------------------------------------------------
  //   inputfile="frame_0001.png";
   //    printf(inputfile);
       //encframe=Open_Image("frame_0001.png");
        encframe->pts = i;
        /* encode the image */
        ret = avcodec_encode_video2(c, &encpkt, encframe, &got_output);
        if (ret < 0) {
            fprintf(stderr, "Error encoding frame\n");
            exit(1);
        }
        if (got_output) {
            printf("Write frame %3d (size=%5d)\n", i, encpkt.size);
            fwrite(encpkt.data, 1, encpkt.size, f);
            av_free_packet(&encpkt);
        }
    }
    /* get the delayed frames */
    for (got_output = 1; got_output; i++) {
        fflush(stdout);
        ret = avcodec_encode_video2(c, &encpkt, NULL, &got_output);
        if (ret < 0) {
            fprintf(stderr, "Error encoding frame\n");
            exit(1);
        }
        if (got_output) {
            printf("Write frame %3d (size=%5d)\n", i, pkt.size);
            fwrite(encpkt.data, 1, encpkt.size, f);
            av_free_packet(&encpkt);
        }
    }
    /* add sequence end code to have a real mpeg file */
    fwrite(endcode, 1, sizeof(endcode), f);
    fclose(f);
    avcodec_close(c);
    av_free(c);
    av_freep(&encframe->data[0]);
    av_frame_free(&encframe);
    printf("\n");
}




int main(int argc, char **argv)
{
    const char *output_type;
    int ret = 0, got_frame;
    /* register all the codecs */
    avcodec_register_all();
    if (argc < 2) {
        printf("usage: %s output_type\n"
               "API example program to decode/encode a media stream with libavcodec.\n"
               "This program generates a synthetic stream and encodes it to a file\n"
               "named test.h264, test.mp2 or test.mpg depending on output_type.\n"
               "The encoded stream is then decoded and written to a raw data output.\n"
               "output_type must be choosen between 'h264', 'mp2', 'mpg'.\n",
               argv[0]);
        return 1;
    }
    output_type = argv[1];
    //inputfile= argv[2];




//----------------------------------------------------------------------------------------------
    if (!strcmp(output_type, "h264")) {
        video_encode_example("test.mp4", AV_CODEC_ID_H264);
    } else if (!strcmp(output_type, "mp2")) {


    } else if (!strcmp(output_type, "mpg")) {
        video_encode_example("test.mpg", AV_CODEC_ID_MPEG1VIDEO);

    } else {
        fprintf(stderr, "Invalid output type '%s', choose between 'h264', 'mp2', or 'mpg'\n",
                output_type);
        return 1;
    }
    return 0;
}
